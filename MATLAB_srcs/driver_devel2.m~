clear all;
% close all;
clc;
setenv('DYLD_LIBRARY_PATH', '/usr/local/bin');

Nx = 81; Ny = 51;
Re_mean = 50; Re_std = 15; % Mean & std of Reynolds number
bump_height_mean = 0.5; bump_height_std = 0.3; % Mean & std of bump height
num.density = 'unif'; % uniform: 'unif'

case_number = 666; % can be used to differentiate among different cases
run_number = 0; % run number starts at 0

Project_path = '/home/l/lucor/Documents/M2_AMSV05_17-18/TP1_AMS_V05/TP_Matlab';
cd(Project_path);
addpath([Project_path,'/MATLlucor/Documents/M2_AMSV05_17-18AB_srcs']);
addpath([Project_path,'/BUMP']);
input_file = 'bump.inp';

% Variability intervals
xi1_mean = Re_mean; xi1_std = Re_std;
xi2_mean = bump_height_mean; xi2_std = bump_height_std;

% Variables generales
num.N = 2; num.P = 3; % case_number;
num.M = PCnumbterms(num.N,num.P);

num.sampling_type = 'quad'; % 'quad' (quadrature) or 'alea' (random) sampling
num.resolution_type = 'projection'; % 'projection' or 'regression'

switch num.resolution_type
    case 'projection'
        Nq_1D = num.P+2;
        num.Nq_tot = Nq_1D^2;
    case 'regression'
        num.Nq_tot = 3.*num.M;
    otherwise, error('Type of resolution not implemented yet!');
end

num.mi = zeros(num.M,num.N);
for kk=1:num.M, num.mi(kk,:) = PCmultindex(num.N,num.P,kk-1); end

n1 = 13;  x1t = linspace(xi1_mean-xi1_std,xi1_mean+xi1_std,n1);
n2 = 11;  x2t = linspace(xi2_mean-xi2_std,xi2_mean+xi2_std,n2);
[X1t,X2t] = ndgrid(x1t,x2t);

x1 = linspace(-1,1,n1); x2 = linspace(-1,1,n2); [X1,X2] = ndgrid(x1,x2);
Ne = n1.*n2;
X1_vec = reshape(X1,Ne,1); X2_vec = reshape(X2,Ne,1);

% Structure gPC
gPC = struct('coeff',zeros(2*Nx-1,2*Ny-1,num.M),'data',zeros(2*Nx-1,2*Ny-1,num.Nq_tot),...
    'Var',zeros(num.M,1),'data_viz',zeros(n1,n2),'poly',zeros(Ne,num.M));

U_gPC = struct('coeff',zeros(2*Nx-1,2*Ny-1,num.M),'var',zeros(2*Nx-1,2*Ny-1));
V_gPC = struct('coeff',zeros(2*Nx-1,2*Ny-1,num.M),'var',zeros(2*Nx-1,2*Ny-1));

switch num.sampling_type
    case 'quad'
        % construire la grille de quadrature stochastique 1D
        [x1_qd,w1_qd] = GaussLegPtsPds(Nq_1D); [x2_qd,w2_qd] = GaussLegPtsPds(Nq_1D);
        
        x1t_qd = Mapping(x1_qd,xi1_mean-xi1_std,xi1_mean+xi1_std); x2t_qd = Mapping(x2_qd,xi2_mean-xi2_std,xi2_mean+xi2_std);
        
        % tensoriser pour avoir les grilles en ND
        [X1_qd,X2_qd] = ndgrid(x1_qd,x2_qd);
        [X1t_qd,X2t_qd] = ndgrid(x1t_qd,x2t_qd);
        
        % generer les repertoires et les fichiers d'entree %
        WriteFiles(Nq_1D,Project_path,case_number,input_file,Nx,Ny,x1t_qd,x2t_qd);
        
    case 'alea'
        x1t_rd = random(num.density,xi1_mean-xi1_std,xi1_mean+xi1_std,num.Nq_tot,1);
        x2t_rd = random(num.density,xi2_mean-xi2_std,xi2_mean+xi2_std,num.Nq_tot,1);
        [x1t_rd,dum] = sort(x1t_rd,'ascend'); x2t_rd = x2t_rd(dum); clear dum;
        Xt_rd = [x1t_rd x2t_rd];
        X_rd = [InvMapping(x1t_rd,xi1_mean-xi1_std,xi1_mean+xi1_std) InvMapping(x2t_rd,xi2_mean-xi2_std,xi2_mean+xi2_std)];
        % generer les repertoires et les fichiers d'entree %
        WriteFiles_alea(num.Nq_tot,Project_path,case_number,input_file,Nx,Ny,Xt_rd);
        
    otherwise, error('Type of sampling type not implemented yet!');
end

display(' Directories and files are ready - Hit return or wait');
display('--');
pause(2)

% faire tourner le bump code pour chaque fichier d'entree
%Bumprun(num.Nq_tot,input_file,case_number,Project_path);

% se redeplacer dans le bon repertoire %
cd(Project_path); pwd

% lire les donnees
switch num.sampling_type
    case 'quad'
        data = Dataread(Nq_1D,Project_path,case_number,Nx,Ny);
    case 'alea'
        data = ReadData_alea(num.Nq_tot,Project_path,case_number,Nx,Ny);
    otherwise, error('Type of sampling type not implemented yet!');
end

U_gPC.data = squeeze(data(:,:,:,1)); V_gPC.data = squeeze(data(:,:,:,2)); clear data;

switch num.resolution_type
    case 'projection'
        % calculer la projection
        for k=0:num.M-1
            run_number = 0;
            for i=1:Nq_1D
                for j=1:Nq_1D
                    run_number = run_number + 1;
                    %                     U_gPC.coeff(:,:,k+1) = U_gPC.coeff(:,:,k+1) +...
                    %                         w1_qd(i).*w2_qd(j).*U_gPC.data(:,:,run_number).*Leg_2D(X1_qd(i,j),X2_qd(i,j),PCmultindex(N,P,k));
                    
                    U_gPC.coeff(:,:,k+1) = U_gPC.coeff(:,:,k+1) +...
                        w1_qd(i).*w2_qd(j).*U_gPC.data(:,:,run_number).*Legendre_poly([X1_qd(i,j) X2_qd(i,j)],num.N,k,num.mi);
                    
                    %                     V_gPC.coeff(:,:,k+1) = V_gPC.coeff(:,:,k+1) +...
                    %                         w1_qd(i).*w2_qd(j).*V_gPC.data(:,:,run_number).*Leg_2D(X1_qd(i,j),X2_qd(i,j),PCmultindex(N,P,k));
                    
                    V_gPC.coeff(:,:,k+1) = V_gPC.coeff(:,:,k+1) +...
                        w1_qd(i).*w2_qd(j).*V_gPC.data(:,:,run_number).*Legendre_poly([X1_qd(i,j) X2_qd(i,j)],num.N,k,num.mi);
                end
            end
        end
        
        %         load Var_Leg_2D_P10.mat; gPC.Var = Var_Leg_2D_P10; clear Var_Leg_2D_P10;
        %
        %         for k=0:M-1,
        %             U_gPC.coeff(:,:,k+1) = U_gPC.coeff(:,:,k+1)./gPC.Var(k+1);
        %             V_gPC.coeff(:,:,k+1) = V_gPC.coeff(:,:,k+1)./gPC.Var(k+1);
        %         end
    case 'regression'
        % calculer la regression
        U_gPC.coeff = PCregress(num,X_rd,U_gPC.data);
        V_gPC.coeff = PCregress(num,X_rd,V_gPC.data);

    otherwise, error('Type of resolution not implemented yet!');
end

switch num.sampling_type
    case 'quad'
        meshfile = [Project_path,'/data','/CASE',num2str(case_number),'/RUNS/run',num2str(ceil(num.Nq_tot./2)-mod(Nq_1D+1,2)),'/xy_001.txt'];
    case 'alea'
        meshfile = [Project_path,'/data','/CASE',num2str(case_number),'/RUNS/run',num2str(15),'/xy_001.txt'];
    otherwise, error('Type of sampling type not implemented yet!');
end

load(meshfile);
X6 = xy_001(:,1); Y6 = xy_001(:,2); clear xy_001;

XY = zeros(2*Nx-1,2*Ny-1,2);
XY(:,:,1) = reshape(X6,2*Ny-1,2*Nx-1)';
XY(:,:,2) = reshape(Y6,2*Ny-1,2*Nx-1)';
clear X6 Y6;

% representation des valeurs moyennes
figure;
pp = 1;

subplot(2,1,1); pcolor(XY(:,:,1),XY(:,:,2),U_gPC.coeff(:,:,pp)); colorbar; axis equal;  shading interp; %flat;
title('Mean U-velocity','fontname','Times','fontsize',14);
xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
axis tight; box on;

subplot(2,1,2); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,pp)); colorbar; axis equal;  shading interp; %flat;
title('Mean V-velocity','fontname','Times','fontsize',14);
xlabel('x','fontname','Times','fontsize',14); ylabel('y','fontname','Times','fontsize',14);
axis tight; box on;


% representation des modes gPC
if 0,
    
    figure;
    ppvec = [2 3 4 5 6 7 8 9];
    subplot(4,2,1); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(1))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(1)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
    subplot(4,2,2); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(2))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(2)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
    subplot(4,2,3); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(3))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(3)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
    subplot(4,2,4); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(4))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(4)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
    subplot(4,2,5); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(5))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(5)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
    subplot(4,2,6); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(6))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(6)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
    subplot(4,2,7); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(7))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(7)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
    subplot(4,2,8); pcolor(XY(:,:,1),XY(:,:,2),V_gPC.coeff(:,:,ppvec(8))); colorbar; axis equal;  shading interp; %flat;
    title(['Mode-',num2str(ppvec(8)-1),' V-velocity'],'fontname','Times','fontsize',14);
    xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
    axis tight; box on;
    
end

% representation des ecarts types
for k=1:num.M-1
    U_gPC.var = U_gPC.var + U_gPC.coeff(:,:,k+1).*U_gPC.coeff(:,:,k+1); % .*gPC.Var(k+1);
    V_gPC.var = V_gPC.var + V_gPC.coeff(:,:,k+1).*V_gPC.coeff(:,:,k+1); % .*gPC.Var(k+1);
end

figure;

subplot(2,1,1); pcolor(XY(:,:,1),XY(:,:,2),sqrt(U_gPC.var)); colorbar; axis equal;  shading interp; %flat;
title('std U-velocity','fontname','Times','fontsize',14);
xlabel('x','fontname','Times','fontsize',13); ylabel('y','fontname','Times','fontsize',14);
axis tight; box on;

subplot(2,1,2); pcolor(XY(:,:,1),XY(:,:,2),sqrt(V_gPC.var)); colorbar; axis equal;  shading interp; %flat;
title('std V-velocity','fontname','Times','fontsize',14);
xlabel('x','fontname','Times','fontsize',14); ylabel('y','fontname','Times','fontsize',14);
axis tight; box on;


% representation des moy. +/- ecarts types
figure; coeffstd = 2;
nnvec = [1 16 31 46 61 76];

for i=1:length(nnvec)
    subplot(2,1,1); plot(squeeze(U_gPC.coeff(nnvec(i),:,1))+XY(nnvec(i),1,1),XY(nnvec(i),:,2),'k'); hold on;
    plot(squeeze(U_gPC.coeff(nnvec(i),:,1))+XY(nnvec(i),1,1)+coeffstd.*sqrt(U_gPC.var(nnvec(i),:)),XY(nnvec(i),:,2),'k--');
    plot(squeeze(U_gPC.coeff(nnvec(i),:,1))+XY(nnvec(i),1,1)-coeffstd.*sqrt(U_gPC.var(nnvec(i),:)),XY(nnvec(i),:,2),'k--');
    
    subplot(2,1,2); plot(squeeze(V_gPC.coeff(nnvec(i),:,1))+XY(nnvec(i),1,1),XY(nnvec(i),:,2),'k'); hold on;
    plot(squeeze(V_gPC.coeff(nnvec(i),:,1))+XY(nnvec(i),1,1)+coeffstd.*sqrt(V_gPC.var(nnvec(i),:)),XY(nnvec(i),:,2),'k--');
    plot(squeeze(V_gPC.coeff(nnvec(i),:,1))+XY(nnvec(i),1,1)-coeffstd.*sqrt(V_gPC.var(nnvec(i),:)),XY(nnvec(i),:,2),'k--');
end

subplot(2,1,1);
title(['Mean +/-',num2str(coeffstd),'std U-velocity'],'fontname','Times','fontsize',14);
xlabel('x','fontname','Times','fontsize',14); ylabel('y','fontname','Times','fontsize',14); axis tight; box on;
subplot(2,1,2);
title(['Mean +/-',num2str(coeffstd),'std V-velocity'],'fontname','Times','fontsize',14);
xlabel('x','fontname','Times','fontsize',14); ylabel('y','fontname','Times','fontsize',14); axis tight; box on;


% postprocessing a partir des coefficients gPC: reconstruction de nappe...

for l=0:num.M-1
    % gPC.poly(:,l+1)=reshape(Leg_2D(X1,X2,PCmultindex(N,P,l)),Ne,1);
    gPC.poly(:,l+1)=reshape(Legendre_poly([X1_vec X2_vec],num.N,l,num.mi),Ne,1);
end


nnx = 61; nny = 41; % 31; % 61;
display(['Coordinates of point at which the response surface is plotted: (x,y)=(',num2str(XY(nnx,nny,1)),',',num2str(XY(nnx,nny,2)),').']); % coord. du pt ou l'on calcule les surfaces de reponse.
gPC.data_viz = PCSampling(V_gPC.coeff(nnx,nny,:),gPC.poly,Ne,1,num.M);
gPC.data_viz = reshape(gPC.data_viz,n1,n2);

% calcul des moments, pdf, ...,

% visualisation
% Structure de visualisation

title_name = 'V-velocity';
xlabel_name = 'Re';
ylabel_name = 'b_H';

switch num.sampling_type
    case 'quad'
X1t = reshape(X1t_qd',num.Nq_tot,1); X2t = reshape(X2t_qd',num.Nq_tot,1);
    case 'alea'
X1t = Xt_rd(:,1) ; X2t = Xt_rd(:,2);
    otherwise, error('Type of sampling type not implemented yet!');
end


vizu1=struct('shading',1,'colorbar',1,'labels',1,'xlabel',xlabel_name,'ylabel',ylabel_name,'title',title_name,...
    'surf_x',x1t,'surf_y',x2t,'surf_data',gPC.data_viz,'gPC_X1grid',X1t,'gPC_X2grid',X2t,'gPC_data',squeeze(V_gPC.data(nnx,nny,:)));

VizSurf(vizu1);

Ne_MC = 250000; npdf = 30;
X1_MC = unifrnd(-1,1,Ne_MC,1);
X2_MC = unifrnd(-1,1,Ne_MC,1);

for l=0:num.M-1,
    % gPC.poly_MC(:,l+1)=reshape(Leg_2D(X1_MC,X2_MC,PCmultindex(N,P,l)),Ne_MC,1);
    gPC.poly_MC(:,l+1)=reshape(Legendre_poly([X1_MC X2_MC],num.N,l,num.mi),Ne_MC,1);
end

echantillon = PCSampling(V_gPC.coeff(nnx,nny,:),gPC.poly_MC,Ne_MC,1,num.M);


figure;
hist(echantillon,npdf);
